#!/bin/sh -e

# shellcheck source=src/logrotate/utilities/logrotate-utilities
. "$SNAP/utilities/logrotate-utilities"

# Clean non existent log file entries from status file
test -e "$LOGROTATE_STATUS_FILE" || touch "$LOGROTATE_STATUS_FILE"
head -1 "$LOGROTATE_STATUS_FILE" > "${LOGROTATE_STATUS_FILE}.clean"
sed 's/"//g' "$LOGROTATE_STATUS_FILE" | while read -r logfile date
do
    [ -e "$logfile" ] && echo "\"$logfile\" $date"
done >> "${LOGROTATE_STATUS_FILE}.clean"
mv "${LOGROTATE_STATUS_FILE}.clean" "$LOGROTATE_STATUS_FILE"

# logrotate doesn't support environment variables in its configuration file,
# so we write a converted version to disk and use that (and of course clean
# it up afterward)
configuration_file="$(mktemp)"
trap 'rm -f "$configuration_file"' EXIT

envsubst < "$SNAP/config/logrotate/logrotate.conf" > "$configuration_file"

# Run logrotate in debug mode. It won't do any rotations, but it WILL check the
# status file and exit non-zero if it's invalid, which gives us an opportunity
# to print an invalid file.
if ! logrotate --debug --verbose --state "$LOGROTATE_STATUS_FILE" "$configuration_file" > /dev/null 2>&1; then
    echo "!!!!!!!!!! Invalid status file !!!!!!!!!!"
    cat "$LOGROTATE_STATUS_FILE"
fi

# If logrotate fails, it could be due to corruption in the status file. Try
# removing it so we start with a clean slate next time around.
if ! logrotate --verbose --state "$LOGROTATE_STATUS_FILE" "$configuration_file"; then
    rm -f "$LOGROTATE_STATUS_FILE"
    exit 1
fi
